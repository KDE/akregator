# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: none
cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
set(PIM_VERSION "6.5.2")
project(akregator VERSION ${PIM_VERSION})

# Update it for each release
set(AKREGATOR_RELEASE_VERSION_DATE "25.10.06") # yy.MM.dd

set(KF_MIN_VERSION "6.14.0")
set(RELEASE_SERVICE_VERSION "25.08.2")
set(QT_REQUIRED_VERSION "6.8.0")

# Use true if stable version => we will check specific version
set(AKREGATOR_STABLE_VERSION true)

find_package(ECM ${KF_MIN_VERSION} CONFIG REQUIRED)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
include(ECMInstallIcons)

include(ECMSetupVersion)
include(ECMAddTests)

include(GenerateExportHeader)
include(ECMGenerateHeaders)

file(
    GLOB_RECURSE ALL_CLANG_FORMAT_SOURCE_FILES
    *.cpp
    *.h
    *.c
)
set(PRE_COMMIT_INSTALLED FALSE)
if(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    if(EXISTS "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit")
        file(READ "${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit" FILE_CONTENTS)
        string(FIND "${FILE_CONTENTS}" "File generated by pre-commit" INDEX)
        if(${INDEX} GREATER_EQUAL 0)
            set(PRE_COMMIT_INSTALLED TRUE)
        endif()
    endif()
endif()
if(NOT ${PRE_COMMIT_INSTALLED})
    include(KDEGitCommitHooks)
    include(KDEClangFormat)
    kde_clang_format(${ALL_CLANG_FORMAT_SOURCE_FILES})
endif()
include(CheckFunctionExists)

include(KDEInstallDirs)
include(KDECMakeSettings)
include(KDECompilerSettings NO_POLICY_SCOPE)
include(ECMAddAppIcon)
include(ECMQtDeclareLoggingCategory)
include(ECMDeprecationSettings)
include(ECMFeatureSummary)
set(KTEXTADDONS_MIN_VERSION "1.6.0")

# Do NOT add quote
set(KDEPIM_DEV_VERSION)

# add an extra space
if(DEFINED KDEPIM_DEV_VERSION)
    set(KDEPIM_DEV_VERSION " ${KDEPIM_DEV_VERSION}")
endif()

set(KDEPIM_VERSION "${PIM_VERSION}${KDEPIM_DEV_VERSION} (${RELEASE_SERVICE_VERSION})")
set(KDEPIM_LIB_VERSION "${PIM_VERSION}")
set(KDEPIM_LIB_SOVERSION "6")

set(KONTACTINTERFACE_LIB_VERSION "6.5.1")
set(LIBGRANTLEETHEME_LIB_VERSION "6.5.1")
set(LIBKDEPIM_LIB_VERSION "6.5.1")
set(MESSAGELIB_LIB_VERSION "6.5.1")
set(PIMCOMMON_LIB_VERSION "6.5.1")

find_package(
    Qt6
    ${QT_REQUIRED_VERSION}
    CONFIG
    REQUIRED
        Widgets
        Test
        WebEngineWidgets
        PrintSupport
)
# Find KF6 package
find_package(KF6I18n ${KF_MIN_VERSION} REQUIRED)
find_package(KF6Crash ${KF_MIN_VERSION} REQUIRED)
find_package(KF6KCMUtils ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6NotifyConfig ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Parts ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6XmlGui ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Notifications ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Syndication ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6Codecs ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6StatusNotifierItem ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6IconThemes ${KF_MIN_VERSION} CONFIG REQUIRED)
find_package(KF6DocTools ${KF_MIN_VERSION})
set_package_properties(
    KF6DocTools
    PROPERTIES
        DESCRIPTION
            "Tools to generate documentation"
        TYPE
            OPTIONAL
)

# Find KdepimLibs Package
find_package(KPim6GrantleeTheme ${LIBGRANTLEETHEME_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6KontactInterface ${KONTACTINTERFACE_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6Libkdepim ${LIBKDEPIM_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6MessageViewer ${MESSAGELIB_LIB_VERSION} CONFIG REQUIRED)
find_package(KF6TextEditTextToSpeech ${KTEXTADDONS_MIN_VERSION} CONFIG)
if(TARGET KF6::TextEditTextToSpeech)
    add_definitions(-DHAVE_KTEXTADDONS_TEXT_TO_SPEECH_SUPPORT)
endif()
find_package(KF6TextAddonsWidgets ${KTEXTADDONS_MIN_VERSION} CONFIG REQUIRED)

find_package(KF6TextUtils ${KTEXTADDONS_MIN_VERSION} CONFIG REQUIRED)
find_package(KPim6WebEngineViewer ${MESSAGELIB_LIB_VERSION} CONFIG REQUIRED)
# Fix plugin support for removing theses dependencies
find_package(KPim6PimCommon ${PIMCOMMON_LIB_VERSION} CONFIG REQUIRED)
find_package(KPim6PimCommonActivities ${PIMCOMMON_LIB_VERSION} CONFIG)

find_package(KF6UserFeedback ${KF_MIN_VERSION} CONFIG)
set_package_properties(
    KF6UserFeedback
    PROPERTIES
        DESCRIPTION
            "User Feedback lib"
        TYPE
            OPTIONAL
        PURPOSE
            "Allow to send Telemetry Information (optional). It can be disable in apps."
)

include_directories(
    ${akregator_SOURCE_DIR}
    ${akregator_BINARY_DIR}
)
add_definitions(-DTRANSLATION_DOMAIN=\"akregator\")
add_definitions(-DQT_NO_CONTEXTLESS_CONNECT)
ecm_set_disabled_deprecation_versions(QT 6.10.0
     KF 6.16.0
)
if(TARGET KF6::UserFeedbackWidgets)
    set(AKREGATOR_WITH_KUSERFEEDBACK true)
endif()
if(BUILD_TESTING)
    add_definitions(-DBUILD_TESTING)
endif()

option(USE_UNITY_CMAKE_SUPPORT "Use UNITY cmake support (speedup compile time)" OFF)

set(COMPILE_WITH_UNITY_CMAKE_SUPPORT OFF)
if(USE_UNITY_CMAKE_SUPPORT)
    set(COMPILE_WITH_UNITY_CMAKE_SUPPORT ON)
endif()

if(TARGET KPim6::PimCommonActivities)
    option(OPTION_USE_PLASMA_ACTIVITIES "Activate plasma activities" ON)
    if(OPTION_USE_PLASMA_ACTIVITIES)
        if(NOT WIN32 AND NOT APPLE)
            set(OPTION_USE_PLASMA_ACTIVITIES true)
        else()
            set(OPTION_USE_PLASMA_ACTIVITIES false)
        endif()
    endif()
    if(OPTION_USE_PLASMA_ACTIVITIES)
        if(NOT WIN32 AND NOT APPLE)
            find_package(PlasmaActivities "6.3.0")
            set_package_properties(
                PlasmaActivities
                PROPERTIES
                    DESCRIPTION
                        "Allow to compile with plasma activities"
                    TYPE
                        OPTIONAL
            )
        endif()

        if(TARGET Plasma::Activities)
            set(HAVE_ACTIVITY_SUPPORT TRUE)
        endif()
    endif()
endif()

configure_file(config-akregator.h.in ${CMAKE_CURRENT_BINARY_DIR}/config-akregator.h)

add_subdirectory(export)
add_subdirectory(interfaces)
add_subdirectory(configuration)
add_subdirectory(src)
add_subdirectory(kontactplugin)

ecm_qt_install_logging_categories(
        EXPORT AKREGATOR
        FILE akregator.categories
        DESTINATION ${KDE_INSTALL_LOGGINGCATEGORIESDIR}
)
if(DEFINED kde_configure_git_pre_commit_hook)
    kde_configure_git_pre_commit_hook(CHECKS CLANG_FORMAT)
endif()
ki18n_install(po)
if(KF6DocTools_FOUND)
    kdoctools_install(po)
    add_subdirectory(doc)
endif()

ecm_feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
